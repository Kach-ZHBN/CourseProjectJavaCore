package dao;

import models.BankAccount;

import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Data Access Object. Клас-посредник для доступа к БД, который инкапсулирует логику взаимодействия с БД.
 * BankAccountDAO работает с таблицей, соответствующей классу BankAccount:
 * create table BankAccount(
 * id int GENERATED BY DEFAULT AS IDENTITY,
 * number varchar,
 * amount numeric
 * )
 */
public class BankAccountDAO {
    private static final String ACCOUNT_FILE_PATH = "src/main/resources/Accounts.txt";
    private final Connection connection = DBConnection.getInstance().connection;

    /**
     * Метод для получения всех банковских аккаунтов из БД
     */
    public List<BankAccount> getAll() {
        List<BankAccount> bankAccounts = new ArrayList<>();
        try {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM BankAccount");

            while (resultSet.next()) {
                BankAccount bankAccount = new BankAccount(resultSet.getString("number"),
                        resultSet.getDouble("amount"));
                bankAccounts.add(bankAccount);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return bankAccounts;
    }

    /**
     * Метод, для получения банковского аккаунта из БД по его номеру. Если аккаунта нет, возвращает null.
     */
    public BankAccount get(String accountNumber) {
        BankAccount bankAccount = null;
        try {
            PreparedStatement preparedStatement =
                    connection.prepareStatement("SELECT * FROM BankAccount WHERE number=?");
            preparedStatement.setString(1, accountNumber);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                bankAccount = new BankAccount(resultSet.getString("number"),
                        resultSet.getDouble("amount"));
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return bankAccount;
    }

    /**
     * Метод, который обновляет банковский аккаунт в БД.
     */
    public void update(BankAccount bankAccount) {
        try {
            PreparedStatement preparedStatement =
                    connection.prepareStatement("UPDATE BankAccount SET amount=? WHERE number=?");
            preparedStatement.setDouble(1, bankAccount.getAmount());
            preparedStatement.setString(2, bankAccount.getNumber());

            preparedStatement.executeUpdate();
            saveBankAccountsToFile(getAll());//обновление файла Account.txt
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Метод, который обновляет файл Account.txt. Предполагаю, что этот метод должен быть не в DAO,
     * но тут его очень (после обновления аккаунта в БД).
     */
    private void saveBankAccountsToFile(List<BankAccount> accounts) {
        try (FileWriter fw = new FileWriter(ACCOUNT_FILE_PATH)) {
            for (BankAccount account : accounts) {
                fw.write(account.getNumber() + ";" + account.getAmount() + "\n");
            }
            fw.flush();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
